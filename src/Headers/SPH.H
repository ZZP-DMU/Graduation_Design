#ifndef __SPH_H__
#define __SPH_H__

/* for fluid particles,they x-direction arrange betweent(0,12-2*PTC_SPACING) */
/* for fluid particles,they y-direction arrange betweent(0,5-2*PTC_SPACING) */
/* for dummy particles,they x-direction arrange betweent (-2*PTC_SPACING,0)and(12-2*PTC_SPACOING,12) */
/* for dummy particles,they y-direction arrange betweent (-2*PTC_SACING,5) */

/* Define Symbols Here*/
#define READ_STL 0  //if or not read stl format file to generate particles
#define DOMAIN_LENGTH 12.0    //computational domain length
#define DOAMIN_DEEPTH 5.0     //computational domain deepth

#define PTC_SPACING 0.01    //spacing between particles
#define PTC_SML PTC_SPACING    //smoothed leng of particles
#define PTC_REGION_RADIUS (2*PTC_SML) //particle support region radius,which is PTC_SML*2

#define FLUID_LENGTH_NUM (int)(DOMAIN_LENGTH/PTC_SPACING+1-4)
#define FLUID_DEEPTH_NUM (int)(DOAMIN_DEEPTH/PTC_SPACING+1-2)

#define FLUID_PTC_NUM (FLUID_LENGTH_NUM)*(FLUID_DEEPTH_NUM)  //fluid particles number
#define SOLID_PTC_NUM 0  //rigid body particles number
#define VIRTUAL_PTC_NUM (int)((DOAMIN_DEEPTH/PTC_SPACING+1)*(DOMAIN_LENGTH/PTC_SPACING+1)-FLUID_PTC_NUM)  //virtual paritcles number
#define PTC_TOL_NUM (FLUID_PTC_NUM+SOLID_PTC_NUM+VIRTUAL_PTC_NUM)   //total particles

#define MESH_SPACING (PTC_SPACING*2.0) //mesh spacing
#define MESH_LENGTH_NUM (int)(DOMAIN_LENGTH/MESH_SPACING) //length-direction mesh number
#define MESH_DEEPTH_NUM (int)(DOAMIN_DEEPTH/MESH_SPACING) //deepth-direction mesh number
#define MESH_TOL_NUM (MESH_LENGTH_NUM*MESH_DEEPTH_NUM) //total mesh number
#define MESH_PTC_NUM 51

#define T_START current_time=time(NULL);{
#define T_END(a) }cout << a << "use time is " << time(NULL)-current_time << " s" << endl;


// two paritcles distance
#define PTC_DISTANCE(a,b) (sqrt(pow(particle->x[a]-particle->x[b],2)+pow(particle->y[a]-particle->y[b],2)))

/* Data Structure Declare */
typedef  struct 
{
    /* declare the position,velosity,pressure,density,type of the particle */
    double *x;  //x coordinations of position
    double *y;  //y coordinations of position
    double *vx; //x-direction velosity
    double *vy; //y-direction velosity
    double *accx;   //x-direction acceleration 
    double *accy;   //y-direction acceleration
    double *pressure;   //pressure of paritcle
    double *density;    //density of particle
    double *dif_density;    //differential density value
    double *mass;   //mass of particle
    char *type; //particle type:0 denote fulid;1 denote rigid;-1 denote dummy particles
}SPH_PARTICLE;

typedef struct 
{
    /* declare the kernel and differential kernel value of each pair */
    double *w;  //kernel value
    double *dwdx;   //differential kernel value in x-direction
    double *dwdy;   //differential kernel value in y-direction
}SPH_KERNEL;


typedef struct 
{
    /* particle pare generated by NNPS algorithm */
    unsigned int total;
    unsigned int *i;
    unsigned int *j;
}SPH_PAIR;


/* Headers Include Here*/
#include <omp.h>
#include "Lib.H"
#include "PreProcess.H"
#include "PostProcess.H"


#endif
